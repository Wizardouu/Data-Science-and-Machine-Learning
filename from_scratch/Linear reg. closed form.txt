#  b,W = (X.t * X)^-1  *  X.t*y

import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.metrics import r2_score

class LinearRegressionClosedForm:
    def __init__(self):
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        # Add a column of ones to X for the bias term
        X_b = np.c_[np.ones((X.shape[0], 1)), X]
        # Closed-form solution (Normal Equation)
        theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y)
        self.bias = theta_best[0]
        self.weights = theta_best[1:]

    def predict(self, X):
        return np.dot(X, self.weights) + self.bias

def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

if __name__ == "__main__":
    # Load dataset and split into training/testing
    X, y = datasets.make_regression(n_samples=100, n_features=1, noise=20, random_state=4)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1234)

    # Initialize and train our linear regression model using the closed-form solution
    regressor = LinearRegressionClosedForm()
    regressor.fit(X_train, y_train)

    # Make predictions
    predictions = regressor.predict(X_test)

    # Calculate mean squared error and R² score
    mse = mean_squared_error(y_test, predictions)
    print("MSE (Closed-Form):", mse)

    accu = r2_score(y_test, predictions)
    print("Accuracy (R² Score - Closed-Form):", accu)

    # Plot results
    y_pred_line = regressor.predict(X)
    cmap = plt.get_cmap("viridis")
    fig = plt.figure(figsize=(8, 6))
    m1 = plt.scatter(X_train, y_train, color=cmap(0.9), s=10, label="Training data")
    m2 = plt.scatter(X_test, y_test, color=cmap(0.5), s=10, label="Testing data")
    plt.plot(X, y_pred_line, color="black", linewidth=2, label="Prediction (Closed-Form)")
    plt.legend()
    plt.show()
