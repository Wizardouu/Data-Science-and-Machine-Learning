import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs

# 1. Generate sample data
X, _ = make_blobs(n_samples=300, centers=4, n_features=2, random_state=42)

class KMeans:
    def __init__(self, K=3, max_iters=100):
        self.K = K
        self.max_iters = max_iters
        self.centroids = None
        self.clusters = None

    def fit(self, X):
        n_samples, n_features = X.shape

        # 2. Initialize centroids randomly from the dataset
        random_sample_indices = np.random.choice(n_samples, self.K, replace=False)
        self.centroids = X[random_sample_indices]

        # 3. Start the iteration process
        for iteration in range(self.max_iters):

            self.clusters = self.assign_clusters(X)

            new_centroids = self.update_centroids(X)

            # 6. Check if centroids have changed; if not, break
            if np.all(self.centroids == new_centroids):
                print("Centroids have converged. Breaking.")
                break

            self.centroids = new_centroids

    def assign_clusters(self, X):
        clusters = []
        # take every sample and calculate distance between it and all centroids and assign it to the nearest
        for i, x in enumerate(X):
            distances = []
            for centroid in self.centroids:
                distance = np.linalg.norm(x - centroid)
                distances.append(distance)
            closest_centroid = np.argmin(distances)
            clusters.append(closest_centroid)
        return np.array(clusters)

    def update_centroids(self, X):
        new_centers = []
        for i in range(self.K):
            cluster_group = X[self.clusters == i]
            centroid = np.zeros(X.shape[1])
            for j, point in enumerate(cluster_group):
                centroid += point
            centroid /= len(cluster_group)
            new_centers.append(centroid)
        return np.array(new_centers)

    def predict(self, X):
        cluster_labels = self.assign_clusters(X)
        return cluster_labels

    def plot_clusters(self, X):
        # Plot each cluster
        for i in range(self.K):
            cluster_points = X[self.clusters == i]
            plt.scatter(cluster_points[:, 0], cluster_points[:, 1], label=f'Cluster {i+1}')

        # Plot centroids
        plt.scatter(self.centroids[:, 0], self.centroids[:, 1], s=300, c='black', marker='X', label='Centroids')
        plt.legend()
        plt.show()

# 7. Initialize KMeans with K=4 and fit to the data
kmeans = KMeans(K=4)
kmeans.fit(X)

# 8. Visualize the clusters
kmeans.plot_clusters(X)